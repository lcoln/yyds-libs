"use strict";export default class ScrollSkin1 extends HTMLElement{static get observedAttributes(){return["data"]}constructor(t){super(t),Object.defineProperty(this,"root",{value:this.attachShadow({mode:"open"}),writable:!0,enumerable:!1,configurable:!0}),Object.defineProperty(this,"props",{value:{data:[]},writable:!0,enumerable:!1,configurable:!0}),this.root.innerHTML='<style>* { margin: 0; padding: 0; box-sizing: border-box; } a { text-decoration: none; } a:focus { outline: none; } .do-ui-scroll { height: 100%; } .do-ui-scroll.skin1 ul { height: 100%; } .do-ui-scroll.skin1 ul li { height: 30px; border-bottom: 1px solid #ccc; } .do-ui-scroll.skin1 ul li :first-child { border-top: 1px solid #ccc; } </style> <section class="do-ui-scroll skin1"> <ul> <li></li> </ul> </section> ',this.__ELM__=Array.from(this.root.children),this.__DOM__=this.__ELM__[1],this?.__REGIESTRYCONFIG__();var e={__SCROLL__:this.__DOM__.children[0]};try{for(var o of Object.keys(e))this[o]=e[o]}catch(t){}}_render(){let t=this.props.data;console.log({data:t}),this.__SCROLL__.innerHTML=t.map(t=>`<li>${t.val}</li>`)}async connectedCallback(){this._render(),console.log(this.el,this.__DOM__)}disconnectedCallback(){console.log("unmount")}get type(){return this.props.type}set type(t){this.props.type=t}attributeChangedCallback(t,e,o){if("data"===t)try{this.props.data=JSON.parse(o)}catch(t){}}adoptedCallback(){console.log("adopted",this.props)}}