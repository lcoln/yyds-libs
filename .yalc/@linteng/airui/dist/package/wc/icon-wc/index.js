"use strict";import svg from"./svg.js";export default class Icon extends HTMLElement{static get observedAttributes(){return["type","tag"]}constructor(t){super(t),Object.defineProperty(this,"root",{value:this.attachShadow({mode:"open"}),writable:!0,enumerable:!1,configurable:!0}),Object.defineProperty(this,"props",{value:{type:"",tag:""},writable:!0,enumerable:!1,configurable:!0}),this.root.innerHTML='<style>* { margin: 0; padding: 0; box-sizing: border-box; } a { text-decoration: none; } a:focus { outline: none; } .icon { display: block; width: var(--size, 20px); height: var(--size, 20px); fill: currentColor; } svg { max-height: 100%; } </style> <svg class="icon" viewBox="0 0 1024 1024"></svg> ',this.__ELM__=Array.from(this.root.children),this.__DOM__=this.__ELM__[1],this?.__REGIESTRYCONFIG__();var e={};try{for(var r of Object.keys(e))this[r]=e[r]}catch(t){}}_render(t){this.__DOM__.innerHTML=`<path d="${svg[t]}"></path><text x="50%" y="50%" text-anchor="middle">test</text>`}async connectedCallback(){}disconnectedCallback(){console.log("unmount")}get type(){return this.props.type}set type(t){this.props.type=t}attributeChangedCallback(t,e,r){t in this.props&&(this.props[t]=r,this._render(r))}adoptedCallback(){console.log("adopted",this.props)}}